BLOG PROJECT :
--------------

Diagram 1
Diagram 2

project Structure
Files and o/p

settings.py
-----------
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATE_DIR = os.path.join(BASE_DIR,'templates')
STATIC_DIR = os.path.join(BASE_DIR,'static')


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blogapp',
    'taggit',
]

STATIC_URL = '/static/'
STATICFILES_DIRS = [STATIC_DIR]

# Configuration for sending an Email

# SMTP mail configuration
# SMTP--> Simple mail Transfer Protocol
# TLS --> Transport Layer Security

EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'sandeshhs6460@gmail.com'
EMAIL_HOST_PASSWORD = '*************'
EMAIL_USE_TLS = True

NOTE point under settings.py
----------------------------
--> taggit
--> mail activity

-------------------------------------------------------------------

urls.py
-------
from django.contrib import admin
from django.urls import path,re_path
from blogapp import views 

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',views.post_list_view),
    # path('',views.PostListView.as_view()),
    re_path(r'^tag/(?P<tag_slug>[-\w]+)/$',views.post_list_view,name='post_list_by_tag_name'),
    re_path(r'^(?P<year>\d{4})/(?P<month>\d{2})/(?P<day>\d{2})/(?P<post>[-\w]+)/$',views.post_detail_view, name = 'post_detail'),
    re_path(r'^(?P<id>\d+)/share/$',views.mail_send_view),
]

NOTE point under urls.py
------------------------
--> Regex
--> name under re_path
--> as_view()

-------------------------------------------------------------------

models.py
---------
from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
from django.urls import reverse
from taggit.managers import TaggableManager
# Create your models here.
# 
class CustomManager(models.Manager):
	def get_queryset(self):
		return super().get_queryset().filter(status='published')


class Post(models.Model):
	STATUS_CHOICES = (('draft','Draft'),('published','Published'))

	title = models.CharField(max_length=50)
	slug = models.SlugField(max_length=50,unique_for_date='publish')
	author = models.ForeignKey(User, related_name = 'blog_posts',on_delete=models.CASCADE)
	body = models.TextField()
	publish = models.DateTimeField(default=timezone.now)
	created = models.DateTimeField(auto_now_add=True)
	updated = models.DateTimeField(auto_now=True)
	status = models.CharField(max_length=50,choices=STATUS_CHOICES,default='draft')
	objects = CustomManager()
	tags = TaggableManager()
	class Meta:
		ordering = ('-publish',)

	def __str__(self):
		return self.title
	
	def get_absolute_url(self):
		return reverse('post_detail',args=[self.publish.year,self.publish.strftime('%m'),self.publish.strftime('%d'),self.slug])


#Model Related to comment section
class Comment(models.Model):
    post = models.ForeignKey(Post,related_name='comments', on_delete=models.CASCADE)
    name = models.CharField( max_length=50)
    email = models.EmailField()
    body = models.TextField()
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
    active = models.BooleanField(default=True)

    class Meta:
        ordering=('-created',)

    def __str__(self):
        return 'Commented by {} on {}'.format(self.name,self.post)


NOTE point under models.py
------------------------
--> CustomManager
--> TaggableManager
--> User table
--> timezone
--> reverse
--> get_absolute_url()
--> ordering under Meta class
--> __str__
--> DateTimeField
--> BooleanField
--> ForeignKey
--> SlugField
--> STATUS_CHOICES 
-------------------------------------------------------------------

admin.py
--------
from django.contrib import admin
from blogapp.models import Post
from blogapp.models import Comment
# Register your models here.


class PostAdmin(admin.ModelAdmin):

	list_display = ['title','slug','author','body','publish','created','updated','status']
	list_filter = ('status','author')
	search_fields = ('title','body','author')
	raw_id_fields = ('author',)
	prepopulated_fields = {'slug':('title',)}
	ordering = ['status','publish']

class CommentAdmin(admin.ModelAdmin):
	list_display = ('name','email','post','body','created','updated','active')
	list_filter = ('active','created','updated')
	search_fields = ('name','email','body')


admin.site.register(Comment, CommentAdmin)
admin.site.register(Post, PostAdmin)


NOTE point under admin.py
------------------------
--> list_display 
--> list_filter 
--> search_fields 
--> raw_id_fields 
--> prepopulated_fields 
--> ordering 
--> register()

-------------------------------------------------------------------

forms.py
--------
from django import forms
from blogapp.models import Comment

class EmailSendForm(forms.Form):
	name = forms.CharField()
	email = forms.EmailField()
	to = forms.CharField()
	comments = forms.CharField(required=False,widget=forms.Textarea)

class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        fields = ('name','email','body')

--------------------------------------------------------------------

views.py
--------
from django.shortcuts import render,get_object_or_404
from blogapp.models import *
from django.core.paginator import Paginator,PageNotAnInteger,EmptyPage
from django.views.generic import ListView
from blogapp.forms import *
from django.core.mail import send_mail
from taggit.models import Tag

# Function Based View
def post_list_view(request,tag_slug=None):
	post_list=Post.objects.all()
	tag=None
	if tag_slug:
		tag=get_object_or_404(Tag,slug=tag_slug)
		post_list=post_list.filter(tags__in=[tag])

	paginator=Paginator(post_list, 2)
	page_number=request.GET.get('page')

	try:
		post_list=paginator.page(page_number)

	except PageNotAnInteger:
		post_list=paginator.page(1)

	except EmptyPage:
		post_list=Paginator.page(paginator.num_pages)

	my_dict={'post_list':post_list,'tag':tag}
	return render(request=request, template_name='blogapp/post_list.html',context=my_dict)

# Class Based View
class PostListView(ListView):
	model = Post
	paginate_by = 2


def post_detail_view(request,year,month,day,post):
	post = get_object_or_404(Post,slug=post,status='published',publish__year=year,publish__month=month,publish__day=day)
	comments = post.comments.filter(active=True)
	csubmit = False
	if request.method == 'POST':
		form = CommentForm(request.POST)
		if form.is_valid():
			new_comment = form.save(commit=False)
			new_comment.post = post 
			new_comment.save()
			csubmit = True
	else:
		form = CommentForm()

	my_dict={'post':post, 'form':form, 'csubmit':csubmit, 'comments':comments}
	
	return render(request = request, template_name = 'blogapp/post_detail.html',context = my_dict)



def mail_send_view(request,id):
	post = get_object_or_404(Post,id=id,status='published')
	sent = False
	if request.method == 'POST':
		form = EmailSendForm(request.POST)
		if form.is_valid():
			cd = form.cleaned_data
			subject = '{}({}) recommends you to read"{}" '.format(cd['name'],cd['email'],post.title)

			post_url = request.build_absolute_uri(post.get_absolute_url())
			message = 'Read the Post at :\n {} \n\n {}\'s Comments:\n{}'.format(post_url,cd['name'],cd['comments'])
			
			#send_mail(subject, message, from_email, recipient_list)
			send_mail(subject, message, 'sandeshhs6460@gmail.com' , [cd['to']])
			sent = True
	else:

		form = EmailSendForm()

	my_dict={'form':form, 'post':post, 'sent':sent}
	return render(request=request, template_name='blogapp/sharebymail.html',context=my_dict)


NOTE points related to views.py
-------------------------------
--> Paginator
--> paginate_by 
--> get_object_or_404
--> tag_slug
--> send_mail
--> PageNotAnInteger
--> EmptyPage
--> page()
-------------------------------------------------------------

blog_tags.py
------------
from blogapp.models import Post 
from django import template
from django.db.models import Count

register=template.Library()

@register.simple_tag(name='my_tag')
def total_posts():
	return Post.objects.count()


@register.inclusion_tag('blogapp/latest_posts.html')
def show_latest_posts():
	latest_posts = Post.objects.order_by('-publish')[:2]
	return {'latest_posts':latest_posts}

@register.simple_tag()
def get_most_commented_posts(count=3):
	return Post.objects.annotate(total_comments=Count('comments')).order_by('-total_comments')[:count]



NOTE points related to blog_tags.py
-------------------------------
--> Library
--> template
--> Count
--> count()
--> order_by
--> annotate
--> simple_tag()
--> inclusion_tag
--> @register

-------------------------------------------------------------

TEMPLATES:
----------

base.html
---------
<!DOCTYPE html>

{% load static %}
{% load blog_tags %}

<html lang="en" dir="ltr">
<head>

	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx" crossorigin="anonymous"></script>

	<link rel="stylesheet" type="text/css" href="{% static "css/blogapp/blog.css" %}">

	<title>
		{% block title_block %}
			
		{% endblock title_block %}
	</title>

</head>
<body>
	<div class="content">

		{% block content_block %}
			
		{% endblock content_block %}
		
	</div>

	<div class="sidebar">

		<h2>SANDESH BLOG</h2>
		<p>The Total number of Blogs: <span id="pcount">  {% my_tag %}  </span> </p>
		<h3>Latest Blog/Posts: </h3>{% show_latest_posts %}

		<h3>Most commented Posts</h3>
		{% get_most_commented_posts as m_c_p%}
		<ul>
			{% for post in m_c_p %}
			
			<li><a href="{{ post.get_absolute_url }}">{{ post.title }}</a></li>
				
			{% endfor %}
		</ul>

	</div>
	
</body>
</html>


================================================================================


post_list.html
---------------
{% extends "blogapp/base.html" %}

{% block title_block %}
	 SANDESH BLOG HOMEPAGE
{% endblock title_block %} 


{% block content_block %}
	<h1>Sandesh's Blog</h1>

	{% if tag %}
		<h2>Posts tagged with '{{ tag.name }}'</h2>
	{% endif %}

	{% for post in post_list  %}
		<a href="{{ post.get_absolute_url }}"><h2>{{ post.title }}</h2></a>
		<p id="date"> Published On {{ post.publish }} by {{ post.author|title }}</p>

		<p>Tags:
			{% for tag in post.tags.all  %}
				<a href="{% url 'post_list_by_tag_name' tag.slug %}" class="btn btn-success">{{ tag.name }}</a>	
			{% endfor %}
		</p>

		{{ post.body|truncatewords:30|linebreaks }}

	{% endfor %}

	{% include "blogapp/pagination.html" with page=post_list %}

{% endblock content_block %}

================================================================================


post_detail.html
-----------------
{% extends "blogapp/base.html" %}

{% block title_block %}
	{{ post.title }}
{% endblock title_block %}

{% block content_block %}

	<h1>{{ post.title }}</h1>
	<p id="date"> Published on {{post.publish}} by {{ post.author|title }}</p>
		{{ post.body|linebreaks }}
	<br><br>
	<div class="container" align="center">
			<a href="/{{ post.id }}/share" class="btn btn-lg btn-success" >Share Post by Email </a>
	</div>


	{% with comments.count as comments_count  %}
		<h2>{{  comments_count}} Comment {{ comments_count|pluralize }}</h2>
	{% endwith %}


	{% if comments %}
		{% for comment in comments %}
			<p id='ch'>Comment {{ forloop.counter }} by {{ comment.name }} on {{ comment.created }}</p>
			<div class="cb"> 
				{{ comment.body|linebreaks }}
			</div>
		{% endfor %}
	<hr><hr>
	{% else %}
		<p>There are no Comments Yet!!!</p>
	{% endif %}


	{% if csubmit %}
		<h2>Your Comment added successfully</h2>
	{% else %}
		<form method="post">
			{{ form.as_p }}
			{% csrf_token %}
			<input type="submit" name="" value="Submit Comment">
		</form>
	{% endif %}


{% endblock content_block %}

================================================================================

pagination.html
--------------
<div class="paginator">

	{% if page.has_previous %}
		<a href="?page={{ page.previous_page_number }}">Previous</a>
		
	{% endif %}

	<span>Page {{ page.number }}  of  {{ page.paginator.num_pages }}</span>
	
	{% if page.has_next %}
		<a href="?page={{ page.next_page_number }}">Next</a>
		
	{% endif %}
	
</div>

================================================================================

sharebymail.html
----------------
{% extends "blogapp/base.html" %}

{% block title_block %}
	Share Post By Email	
{% endblock title_block %}

{% block content_block %}
	{% if sent %}
		<h1>Email sent Successfully</h1>
		<h2>Post with title: {{ post.title }} shared by email</h2>

	{% else %}
		<h1>
		    Share post with Title: {{ post.title }} by email
		</h1>

		<form method="POST">
			{{ form.as_p }}
			{% csrf_token %}
			<input type="submit" name="" class="btn btn-primary btn-lg" value="Send Mail">
		</form>

	{% endif %}

{% endblock content_block %}

================================================================================

latest_posts.html
---------------

<ul>
	{% for post in  latest_posts %}
		<li><a href="{{ post.get_absolute_url }}"> {{ post.title }}</a></li>
	{% endfor %}
</ul>

================================================================================


blog.css
--------
.content{
	width: 60%;
	float: left;
	padding: 10px 0 0 30px;
	background: red;
	height: 100%;
}


.sidebar{
	width: 40%;
	float: right;
	padding: 10px;
	background: green;
	height: 100%;
}

h1{
	text-align: center;
	border: 1px solid yellow;
	padding-bottom: 10px;
}

body{
	color: white;
	background: red;
}


#date{
	color: yellow;
	font-size: 15px;
	font-style: italic;
}


#ch{
	color: yellow;
	font-size: 30px;
	font-style: italic;
	border-bottom: 2px solid yellow;
}

#pcount{
	font-size: 40px;
	color: yellow;
	font-weight: bold;
}


----------------------------------------------------------------

	python manage.py shell

(InteractiveConsole)
>>> from blogapp.models import Post
>>> post  = Post.objects.get(id=1)
>>> post.title
	'Indian Cricket Team Information'
>>> post.tags.add('india','cricket')
>>> post.tags.all()
	<QuerySet [<Tag: cricket>, <Tag: india>]>


FBV 

{% include "blogapp/pagination.html" with page=post_list %}

CBV 

{% include "blogapp/pagination.html" with page=page_obj %}

---------------------------------------------------------------------






